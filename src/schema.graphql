type Query {
  getAllUpdates(filter: DailyUpdateFilter): DailyUpdates!
  verifyUser(user: UserInput!): UserVerificationResponse!
}

type Mutation {
  addDailyUpdate(input: DailyUpdateInput!): DailyUpdateResponse!
  registerUser(input: RegisterUserInput!): UserRegistrationResponse!
}

input DailyUpdateInput {
  yesterday: String!
  today: String!
  onCallSupport: String!
  impediments: String!
  followUps: String!
  createdBy: String!
}

input DailyUpdateFilter {
  createdBy: String
  createTimeStamp: String
}

input UserInput {
  email: String!
  password: String!
}

input RegisterUserInput {
  name: String!
  employeeId: String!
  email: String!
  password: String!
  userType: UserType!
}

type DailyUpdateResponse {
  success: Boolean!
  message: String
}

type DailyUpdateModel {
  createTimeStamp: String!
  createdBy: String!
  yesterday: String!
  today: String!
  onCallSupport: String!
  impediments: String!
  followUps: String!
}

type DailyUpdates {
  dailyUpdates: [DailyUpdateModel!]!
}

type UserVerificationResponse {
  verificationStatus: Boolean!
  userType: String!
}

type UserRegistrationResponse {
  success: Boolean!
  message: String
}

type UserDetail {
  name: String!
  employeeId: String!
  email: String!
  password: String!
  userType: String!
}

enum UserType {
  ADMIN
  USER
  INVALID
}
